default namespace p = "http://www.w3.org/ns/xproc"
namespace local = ""

# This schema could be made more constrained.

StandardStep = Step-add-attribute | Step-add-xml-base | Step-compare | Step-count | Step-delete | Step-directory-list | Step-error | Step-escape-markup | Step-filter | Step-http-request | Step-identity | Step-insert | Step-label-elements | Step-load | Step-make-absolute-uris | Step-namespace-rename | Step-pack | Step-parameters | Step-rename | Step-replace | Step-set-attributes | Step-sink | Step-split-sequence | Step-store | Step-string-replace | Step-unescape-markup | Step-unwrap | Step-wrap | Step-wrap-sequence | Step-xinclude | Step-xslt | Step-exec | Step-hash | Step-uuid | Step-validate-with-relax-ng | Step-validate-with-schematron | Step-validate-with-xml-schema | Step-www-form-urldecode | Step-www-form-urlencode | Step-xquery | Step-xsl-formatter

Step-add-attribute =
  element add-attribute {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    attribute attribute-name { xsd:QName }?,
    attribute attribute-prefix { xsd:NCName }?,
    attribute attribute-namespace { xsd:anyURI }?,
    attribute attribute-value { xsd:string }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-add-xml-base =
  element add-xml-base {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute all { xsd:boolean }?,
    attribute relative { xsd:boolean }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-compare =
  element compare {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute fail-if-not-equal { xsd:boolean }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-count =
  element count {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute limit { xsd:integer }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-delete =
  element delete {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-directory-list =
  element directory-list {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute path { xsd:anyURI }?,
    attribute include-filter { RegularExpression }?,
    attribute exclude-filter { RegularExpression }?,
    (WithOption* & (Documentation|PipeInfo)*)
  }

Step-error =
  element error {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute code { xsd:QName }?,
    attribute code-prefix { xsd:NCName }?,
    attribute code-namespace { xsd:anyURI }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-escape-markup =
  element escape-markup {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute cdata-section-elements { ListOfQNames }?,
    attribute doctype-public { xsd:string }?,
    attribute doctype-system { xsd:anyURI }?,
    attribute escape-uri-attributes { xsd:boolean }?,
    attribute include-content-type { xsd:boolean }?,
    attribute indent { xsd:boolean }?,
    attribute media-type { xsd:string }?,
    attribute method { xsd:QName }?,
    attribute omit-xml-declaration { xsd:boolean }?,
    attribute standalone { "true" | "false" | "omit" }?,
    attribute undeclare-prefixes { xsd:boolean }?,
    attribute version { xsd:string }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-filter =
  element filter {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute select { XPathExpression }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-http-request =
  element http-request {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute byte-order-mark { xsd:boolean }?,
    attribute cdata-section-elements { ListOfQNames }?,
    attribute doctype-public { xsd:string }?,
    attribute doctype-system { xsd:anyURI }?,
    attribute encoding { xsd:string }?,
    attribute escape-uri-attributes { xsd:boolean }?,
    attribute include-content-type { xsd:boolean }?,
    attribute indent { xsd:boolean }?,
    attribute media-type { xsd:string }?,
    attribute method { xsd:QName }?,
    attribute normalization-form { NormalizationForm }?,
    attribute omit-xml-declaration { xsd:boolean }?,
    attribute standalone { "true" | "false" | "omit" }?,
    attribute undeclare-prefixes { xsd:boolean }?,
    attribute version { xsd:string }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-identity =
  element identity {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    (InputConnection* & Log* & (Documentation|PipeInfo)*)
  }

Step-insert =
  element insert {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    attribute position { "first-child" | "last-child" | "before" | "after" }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-label-elements =
  element label-elements {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute attribute { xsd:QName }?,
    attribute attribute-prefix { xsd:NCName }?,
    attribute attribute-namespace { xsd:anyURI }?,
    attribute label { XPathExpression }?,
    attribute match { XSLTMatchPattern }?,
    attribute replace { xsd:boolean }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-load =
  element load {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute href { xsd:anyURI }?,
    attribute dtd-validate { xsd:boolean }?,
    (WithOption* & (Documentation|PipeInfo)*)
  }

Step-make-absolute-uris =
  element make-absolute-uris {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    attribute base-uri { xsd:anyURI }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-namespace-rename =
  element namespace-rename {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute from { xsd:anyURI }?,
    attribute to { xsd:anyURI }?,
    attribute apply-to { "all" | "elements" | "attributes" }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-pack =
  element pack {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute wrapper { xsd:QName }?,
    attribute wrapper-prefix { xsd:NCName }?,
    attribute wrapper-namespace { xsd:anyURI }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-parameters =
  element parameters {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    (InputConnection* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

Step-rename =
  element rename {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    attribute new-name { xsd:QName }?,
    attribute new-prefix { xsd:NCName }?,
    attribute new-namespace { xsd:anyURI }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-replace =
  element replace {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-set-attributes =
  element set-attributes {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-sink =
  element sink {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    (InputConnection* & (Documentation|PipeInfo)*)
  }

Step-split-sequence =
  element split-sequence {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute initial-only { xsd:boolean }?,
    attribute test { XPathExpression }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-store =
  element store {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute href { xsd:anyURI }?,
    attribute byte-order-mark { xsd:boolean }?,
    attribute cdata-section-elements { ListOfQNames }?,
    attribute doctype-public { xsd:string }?,
    attribute doctype-system { xsd:anyURI }?,
    attribute encoding { xsd:string }?,
    attribute escape-uri-attributes { xsd:boolean }?,
    attribute include-content-type { xsd:boolean }?,
    attribute indent { xsd:boolean }?,
    attribute media-type { xsd:string }?,
    attribute method { xsd:QName }?,
    attribute normalization-form { NormalizationForm }?,
    attribute omit-xml-declaration { xsd:boolean }?,
    attribute standalone { "true" | "false" | "omit" }?,
    attribute undeclare-prefixes { xsd:boolean }?,
    attribute version { xsd:string }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-string-replace =
  element string-replace {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    attribute replace { XPathExpression }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-unescape-markup =
  element unescape-markup {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute namespace { xsd:anyURI }?,
    attribute content-type { xsd:string }?,
    attribute encoding { xsd:string }?,
    attribute charset { xsd:string }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-unwrap =
  element unwrap {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-wrap =
  element wrap {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute wrapper { xsd:QName }?,
    attribute wrapper-prefix { xsd:NCName }?,
    attribute wrapper-namespace { xsd:anyURI }?,
    attribute match { XSLTMatchPattern }?,
    attribute group-adjacent { XPathExpression }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-wrap-sequence =
  element wrap-sequence {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute wrapper { xsd:QName }?,
    attribute wrapper-prefix { xsd:NCName }?,
    attribute wrapper-namespace { xsd:anyURI }?,
    attribute group-adjacent { XPathExpression }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-xinclude =
  element xinclude {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute fixup-xml-base { xsd:boolean }?,
    attribute fixup-xml-lang { xsd:boolean }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-xslt =
  element xslt {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute initial-mode { xsd:QName }?,
    attribute template-name { xsd:QName }?,
    attribute output-base-uri { xsd:anyURI }?,
    attribute version { xsd:string }?,
    (InputConnection* & WithOption* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

Step-exec =
  element exec {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute command { xsd:string }?,
    attribute args { xsd:string }?,
    attribute cwd { xsd:string }?,
    attribute source-is-xml { xsd:boolean }?,
    attribute result-is-xml { xsd:boolean }?,
    attribute wrap-result-lines { xsd:boolean }?,
    attribute errors-is-xml { xsd:boolean }?,
    attribute wrap-error-lines { xsd:boolean }?,
    attribute path-separator { xsd:string }?,
    attribute failure-threshold { xsd:integer }?,
    attribute arg-separator { xsd:string }?,
    attribute byte-order-mark { xsd:boolean }?,
    attribute cdata-section-elements { ListOfQNames }?,
    attribute doctype-public { xsd:string }?,
    attribute doctype-system { xsd:anyURI }?,
    attribute encoding { xsd:string }?,
    attribute escape-uri-attributes { xsd:boolean }?,
    attribute include-content-type { xsd:boolean }?,
    attribute indent { xsd:boolean }?,
    attribute media-type { xsd:string }?,
    attribute method { xsd:QName }?,
    attribute normalization-form { NormalizationForm }?,
    attribute omit-xml-declaration { xsd:boolean }?,
    attribute standalone { "true" | "false" | "omit" }?,
    attribute undeclare-prefixes { xsd:boolean }?,
    attribute version { xsd:string }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-hash =
  element hash {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute value { xsd:string }?,
    attribute algorithm { xsd:QName }?,
    attribute match { XSLTMatchPattern }?,
    attribute version { xsd:string }?,
    (InputConnection* & WithOption* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

Step-uuid =
  element uuid {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    attribute version { xsd:integer }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-validate-with-relax-ng =
  element validate-with-relax-ng {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute dtd-attribute-values { xsd:boolean }?,
    attribute dtd-id-idref-warnings { xsd:boolean }?,
    attribute assert-valid { xsd:boolean }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-validate-with-schematron =
  element validate-with-schematron {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute phase { xsd:string }?,
    attribute assert-valid { xsd:boolean }?,
    (InputConnection* & WithOption* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

Step-validate-with-xml-schema =
  element validate-with-xml-schema {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute use-location-hints { xsd:boolean }?,
    attribute try-namespaces { xsd:boolean }?,
    attribute assert-valid { xsd:boolean }?,
    attribute mode { "strict" | "lax" }?,
    (InputConnection* & WithOption* & Log* & (Documentation|PipeInfo)*)
  }

Step-www-form-urldecode =
  element www-form-urldecode {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute value { xsd:string }?,
    (WithOption* & (Documentation|PipeInfo)*)
  }

Step-www-form-urlencode =
  element www-form-urlencode {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute match { XSLTMatchPattern }?,
    (InputConnection* & WithOption* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

Step-xquery =
  element xquery {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    (InputConnection* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

Step-xsl-formatter =
  element xsl-formatter {
    name.ncname.attr?,
    common.attributes,
    use-when.attr?,
    attribute href { xsd:anyURI }?,
    attribute content-type { xsd:string }?,
    (InputConnection* & WithOption* & Log* & WithParam* & (Documentation|PipeInfo)*)
  }

